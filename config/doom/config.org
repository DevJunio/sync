#+title: Config

* Core
Useful settings before to allow a better further customization
** Config
*** Instantiate server
#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-mode))
#+end_src

** lib
Core things and components to
#+begin_src emacs-lisp
(defun buffer-unique-p ()
  "Check if the current buffer is unique among all windows."

  (let ((buffer (current-buffer)))
    (not (cl-loop for win being the windows
                  if (eq buffer (window-buffer win))
                  collect win))))

(defun ju.kill-this-buffer ()
  (interactive)
  (if (minibufferp)
      (abort-recursive-edit)
    (kill-buffer (current-buffer))))

(defun ju.kill-buffer-delete-window ()
  "Kill the current buffer and then delete the current window."
  (interactive)
  (if (one-window-p)
      (ju.kill-this-buffer)
    (progn
      (when (buffer-unique-p)
        (ju.kill-this-buffer))
      (delete-window))))

(defmacro defun! (name arglist &optional docstring &rest body)
  "`defun' but return guaranteed."
  (declare (doc-string 3) (indent 2))
  `(progn (defun ,name ,arglist ,docstring ,@body)
          #',name))

(use-package! general
  :defer 0
  :init
  (general-evil-setup t)
  (eval-and-compile
    (defalias 'after #'with-eval-after-load)
    (defalias 'expand #'expand-file-name)
    (defalias 'gsetq #'general-setq)
    (defalias 'def #'general-def)
    (defalias 'gsetq-local #'general-setq-local)
    (defalias 'gsetq-default #'general-setq-default)))

;; Remove `s' bind lock
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)
#+end_src

#+begin_src emacs-lisp
(defun greedily-do-daemon-setup ()
  (require 'org)
  (when (require 'mu4e nil t)
    (setq mu4e-confirm-quit t)
    (setq +mu4e-lock-greedy t)
    (setq +mu4e-lock-relaxed t)
    (when (+mu4e-lock-available t)
      (mu4e--start)))
  (when (require 'elfeed nil t)
    (run-at-time nil (* 8 60 60) #'elfeed-update)))

(when (daemonp)
  (add-hook 'emacs-startup-hook #'greedily-do-daemon-setup)
  (add-hook! 'server-after-make-frame-hook
    (unless (string-match-p "\\*draft\\|\\*stdin\\|emacs-everywhere" (buffer-name))
      (switch-to-buffer +doom-dashboard-name))))

(when (display-graphic-p)
  (push '(alpha . (90 . 90)) default-frame-alist)
  (gsetq doom-theme 'doom-one))
      #+end_src

* Misc
#+begin_src emacs-lisp
(gsetq +popup-default-alist '((reusable-frames . visible)(window-height . 0.25)))

(setq user-full-name "Junio Santos"
      user-mail-address "info@junio.dev")

(gsetq doom-font (font-spec :family "Iosevka Custom" :size 18 :weight 'Regular))
(gsetq doom-variable-pitch-font (font-spec :family "Iosevka Custom" :size 18))

;; recentf
(use-package! recentf
  :config
  (add-to-list 'recentf-exclude
             (recentf-expand-file-name (expand "~/.config/emacs/.local"))))

(use-package! org
  :init
  (setq-default org-directory (expand "~/sync/org")))

(gsetq-default vertico-posframe-min-width 60)

(setq-hook! 'prog-mode-hook tab-width 4)
(setq-hook! 'emacs-lisp-mode-hook tab-width 2)

(after 'org-roam
  (gsetq org-roam-directory (expand "~/sync/org/notes")))

(nmap
  "C-M-h" #'shrink-window-horizontally
  "C-M-l" #'enlarge-window-horizontally
  "C-M-k" #'enlarge-window
  "C-M-j" #'shrink-window)
(vmap
  "C-e" #'end-of-line
  "C-d" #'evil-scroll-down
  "C-f" #'right-char
  "C-b" #'left-char)
(imap
  "C-d" #'delete-char
  "C-e" #'end-of-line)
(nvmap
  "0" #'evil-next-line-1-first-non-blank
  "-" #'evil-end-of-line)
(mmap
  "j" #'evil-next-visual-line
  "k" #'evil-previous-visual-line)
(vmap
  "K" #'drag-stuff-up
  "J" #'drag-stuff-down
  "L" #'drag-stuff-right
  "H" #'drag-stuff-left)

(nmap :prefix "g"
  "a" #'lsp-execute-code-action)

(general-def '(normal visual)
  :infix "f"
  "d" #'save-buffer
  "f" #'find-file
  "p" #'doom/find-file-in-private-config
  "r" #'recentf)

(def '(normal visual) :prefix "s"
  "b" #'switch-to-buffer
  "d" #'ju.kill-buffer-delete-window

  "j" #'evil-window-down
  "k" #'evil-window-up
  "l" #'evil-window-right
  "h" #'evil-window-left

  "i" #'evil-buffer
  "I" #'ibuffer
  "n" #'next-buffer
  "o" #'delete-other-windows
  "0" #'doom/kill-other-buffers
  "p" #'previous-buffer
  "r" #'revert-buffer
  "s" #'consult-buffer)

(map! :map global-map
      [C-M-i] #'completion-at-point
      [C-tab] #'completion-at-point
      "M-n" 'cycle-buffer-backward
      "M-p" 'cycle-buffer
      "M-l" 'evil-buffer
      "M-k" 'ju.kill-this-buffer)

(after! beacon
  (beacon-mode 1))

;; Vertico
(use-package! vertico
  :init
  (autoload 'vertico--advice "vertico")
  (advice-add #'vertico--format-candidate :around
              (lambda (orig cand prefix suffix index _start)
                (setq cand (funcall orig cand prefix suffix index _start))
                (concat
                 (if (= vertico--index index)
                     (propertize "Â» " 'face 'vertico-current)
                   "  ")
                 cand)))
  (define-minor-mode vertico-mode
    "VERTical Interactive COmpletion."
    :global t :group 'vertico
    (if vertico-mode
        (progn
          (advice-add #'completing-read-default :around #'vertico--advice)
          (advice-add #'completing-read-multiple :around #'vertico--advice))
      (advice-remove #'completing-read-default #'vertico--advice)
      (advice-remove #'completing-read-multiple #'vertico--advice)))
  (vertico-mode)
  :config
  (gsetq vertico-indexed-start 1)
  (gsetq vertico-count 10)

(defun ju/--basic-remote-try-completion (string table pred point)
  (and (vertico--remote-p string)
       (completion-basic-try-completion string table pred point)))

(defun ju/--basic-remote-all-completions (string table pred point)
  (and (vertico--remote-p string)
       (completion-basic-all-completions string table pred point)))

  (add-to-list 'completion-styles-alist
               '(basic-remote           ; Name of `completion-style'
                 ju/--basic-remote-try-completion ju/--basic-remote-all-completions nil))

  (dolist (c (list (cons "C-1" "1")
                   (cons "C-2" "2")
                   (cons "C-3" "3")
                   (cons "C-4" "4")
                   (cons "C-5" "5")
                   (cons "C-6" "6")
                   (cons "C-7" "7")
                   (cons "C-8" "8")
                   (cons "C-9" "9")
                   (cons "C-0" "0")
                   (cons "C-(" "\\(")
                   (cons "C-)" "\\)")
                   (cons "C-{" "\\[")
                   (cons "C-}" "\\]")))
    (define-key vertico-map (kbd (car c)) `(lambda ()
                                             (interactive)
                                             (insert ,(cdr c)))))

  (defmacro vertico--select-index! (index)
    "Return a named function to run `vertico-directory-enter' for INDEX."
    `(defun! ,(intern (format "vertico-enter %s" index)) ()
       ,(format "Call `vertico-directory-enter' for index %s." index)
       (interactive)
       (let ((vertico--index ,index))
         (vertico-directory-enter))))
  (defun ju.vertico--select-item ()
    (interactive)
    (vertico-insert)
    (vertico-directory-enter))

  (general-def vertico-map
    "<prior>" #'vertico-scroll-down
    "<next>" #'vertico-scroll-up
    "<C-backspace>" #'vertico-directory-delete-word
    "<escape>" #'keyboard-escape-quit

    "?" #'minibuffer-completion-help

    "C-l" #'ju.vertico--select-item
    "C-j" #'vertico-next
    "C-k" #'vertico-previous

    "C-u" #'vertico-scroll-down
    "C-d" #'vertico-scroll-up

    "1" (vertico--select-index! 0)
    "2" (vertico--select-index! 1)
    "3" (vertico--select-index! 2)
    "4" (vertico--select-index! 3)
    "5" (vertico--select-index! 4)
    "6" (vertico--select-index! 5)
    "7" (vertico--select-index! 6)
    "8" (vertico--select-index! 7)
    "9" (vertico--select-index! 8)
    "0" (vertico--select-index! 9))

  (vertico-indexed-mode))

(gsetq marginalia-align-offset 20)
#+end_src

*** direnv
#+begin_src emacs-lisp
(use-package! direnv
   :init
    (direnv-mode))
#+end_src

*** Dired
#+begin_src emacs-lisp
(use-package! dired
  :gfhook
  (nil #'auto-revert-mode)
  ('dired-initial-position-hook #'dired-hide-details-mode)
  :general
  (nmap :prefix "SPC"
    "-" #'dired-jump)
  :config
  (gsetq dired-recursive-copies 'always
         dired-clean-confirm-killing-deleted-buffers nil
         dired-kill-when-opening-new-dired-buffer t)
  (gsetq dired-listing-switches
         ;; -v - natural sort numbers
         ;; --almost-all - all except . and ..
         (concat "-l -v --almost-all --group-directories-first "
                 "--time-style=long-iso")))

(use-package! dired-toggle
  :general
  (nmap :map 'dired-mode-map
    "TAB" #'dired-toggle))
#+end_src

*** Dirvish
#+begin_src emacs-lisp
(use-package! dirvish
  :gfhook
  ;; truncate long file names instead of wrapping
  ('dirvish-find-entry-hook
   (lambda (&rest _) (setq-local truncate-lines t)))
  ('dirvish-preview-setup-hook (defun! dirvish--preview-setup ()
                                 (display-line-numbers-mode -1)
                                 (setq-local mode-line-format nil
                                             truncate-lines t)))
  :init
  (general-after 'dired
    (require 'dirvish))
  :config
  (general-pushnew (cons (list "png" "jpg" "jpeg" "webp") (list "mvi" "%f"))
                   dirvish-open-with-programs)

  (gsetq dirvish-yank-overwrite-existing-files 'never
         dirvish-attributes '(all-the-icons file-size vc-state symlink-arrow)
         dirvish-yank-new-name-style 'append-to-filename
         dirvish-yank-new-name-style 'append-to-ext
         dirvish-mode-line-position 'global
         dirvish-mode-line-format
         '(:left
           (" " file-modes " " file-link-number " " file-user ":" file-group " "
            symlink omit vc-info)
           :right
           (sort yank index))
         dirvish-header-line-format
         '(:left
           (path symlink)
           :right
           (free-space))
         dirvish-layout-recipes
         (list '(0 0 0.8)
               '(0 0 0.4)
               dirvish-default-layout))

  (general-def 'normal dired-mode-map
    ;; https://github.com/alexluigit/dirvish/issues/186
    "i" #'dired-find-file

    "a" #'dirvish-dispatch

    "l" #'dirvish-history-go-backward
    "L" #'dirvish-history-go-forward
    "b" #'dirvish-history-jump

    "M" #'dirvish-layout-switch

    "z" #'dirvish-setup-menu

    "yp" #'dirvish-copy-file-path
    "yn" #'dirvish-copy-file-name
    "yd" #'dirvish-copy-file-directory

    "pp" #'dirvish-yank
    "pm" #'dirvish-move
    "pl" #'dirvish-symlink
    "pL" #'dirvish-relative-symlink
    "ph" #'dirvish-hardlink

    "o" #'dirvish-quicksort

    "S" #'dirvish-total-file-size)

  (dirvish-override-dired-mode)
  ;; find-file preview
  (dirvish-peek-mode))
#+end_src
